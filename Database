import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;

import javax.swing.table.DefaultTableModel;

import com.mysql.cj.jdbc.exceptions.MysqlDataTruncation;


public class MySQLDatabase {

	private static ResultSet result;
	private static Connection con;
	private static PreparedStatement select, insert;
	
	
	//	Search events by event name from database
	protected static DefaultTableModel searchEventsByEventName(String userLoggedIn, String event)
	{
		result = null;	// reset result variable
		try {
			con = MySQLConnection.getConnection();
			select = con.prepareStatement("SELECT * FROM " + userLoggedIn + " WHERE Tapahtuma LIKE '" + event + "%' ORDER BY Päiväys DESC");
			result = select.executeQuery();
			return setTableModel(result);
		} catch (MysqlDataTruncation e)
		{
			System.out.println("SQL error in MySQLDatabase class >> searchByEventName method. " + e);
		} catch (SQLException e)
		{
			System.out.println("SQL error in MySQLDatabase class >> searchEventByEventName method " + e);
		}
		catch (Exception e) {
			System.out.println("Problem in MySQLDatabase class >> searchEventName method." + e);
		}
		finally
		{
			try {
				result.close();
				select.close();
			} catch (SQLException e) {
				System.out.println("SQL error in MySQLDatabase class >> searchEventsByEventName() method. Closing ResultSet and PreparedStatement. ");
				e.printStackTrace();
			}
		}
		return null;
	}
	
	
	protected static DefaultTableModel get5PreviousEvents(String userLoggedIn)
	{
//		errorWindowGui error = new errorWindowGui();

		result = null; // reset result variable
		try {
			con = MySQLConnection.getConnection();
			select = con.prepareStatement("SELECT * FROM " + userLoggedIn + " ORDER BY ID DESC LIMIT 5");
			result = select.executeQuery();
			return setTableModel(result);
		} catch (SQLException e)
		{
			System.out.println("SQL error in MySQLDatabase class >> get5PreviousEvents method. " + e);
		}
		catch (Exception e) {
			System.out.println("Undefined error in MySQLDatabases class >> get5PreviousEvents method. " + e);
		}
		finally
		{
			try {
				result.close();
				select.close();
			} catch (SQLException e) {
				System.out.println("SQL error in MySQLDatabase class >> get5PreviousEvents() method. Closing ResultSet and PreparedStatement. ");
				e.printStackTrace();
			}
		}
		return null;
	}
	
	
	protected static DefaultTableModel getEventHistory(String userLoggedIn)
	{
		// reset variables
		con = null;
		select = null;
		result = null;
		
		try {
			con = MySQLConnection.getConnection();
			select = con.prepareStatement("SELECT * FROM " + userLoggedIn + " ORDER BY Päiväys DESC");
			result = select.executeQuery();
			return setTableModel(result);
			} catch (SQLException e)
			{
				System.out.println("SQL error in MySQLDatabase class >> getEventHistory2() method >> TableModel. " + e);
			}
			catch (Exception e)			
			{
					System.out.println("Error in MySQLDatabase class >> getEventHistory2() method >> TableModel. " + e);
			}
			finally
			{
				try {
					result.close();
					select.close();
				} catch (SQLException e) {
					System.out.println("SQL error in MySQLDatabase class >> getEventHistory() method. Closing ResultSet and PreparedStatement. ");
					e.printStackTrace();
				}
			}
		
		return null;
	}
	
	
	protected static ArrayList<String> getDistinctEvents(String userLoggedIn)
	{
		// reset variables
		con = null;
		select = null;
		result = null;
		
		try {
			con = MySQLConnection.getConnection();
			select = con.prepareStatement("SELECT DISTINCT Tapahtuma FROM " + userLoggedIn + " ORDER BY Päiväys DESC LIMIT 2");
			result = select.executeQuery();
			
			ArrayList<String> array = new ArrayList<String>();
			while (result.next())
			{
				array.add(result.getString("Tapahtuma"));
			}
			
			if (array.isEmpty() == true)
			{
				return null;
			}
			else 
			{
				return array;
			}
			
		} catch (SQLException e)
		{
			System.out.println("SQL error in MySQLDatabase class >> getDistinctEvents() method " + e);
		} 
		catch (Exception e) {
			System.out.println("Undefined error in MySQLDatabase class >> getDistinctEvents() method. " + e);
		}
		finally
		{
			try {
				result.close();
				select.close();
			} catch (SQLException e) {
				System.out.println("SQL error in MySQLDatabase class >> getDistinctEvents() method. Closing ResultSet and PreparedStatement. ");
				e.printStackTrace();
			}
		}
		return null;
	}
	
	
	//	Insert event into database
	protected static void addEvent(String userLoggedIn, String event, String user, String price)
	{
		// reset variables
		con = null;
		insert = null;
				
		try {
			con = MySQLConnection.getConnection();
			insert = con.prepareStatement("INSERT INTO " + userLoggedIn + " (Tapahtuma, Maksaja, Hinta) VALUES ('" + event + "', '" + user + "'," + "'" + price + "')");
			insert.executeUpdate();
		} 
		catch(SQLIntegrityConstraintViolationException e)
		{
			System.out.println("SQL Constraint Violation error in MySQLDatabase class >> addEvent method. " + e);
		} 
		catch (SQLException e)
		{
			System.out.println("SQL error in MySQLDatabase class >> addEvent method. " + e);
		}
		catch(Exception e)
		{
			System.out.println("Undefined error in MySQLDatabase class >> addEvent method. " + e);
		}
		finally
		{
			try {
				insert.close();
			} catch (SQLException e) {
				System.out.println("SQL error in MySQLDatabase class >> addEvent() method. Closing ResultSet and PreparedStatement. ");
				e.printStackTrace();
			}
		}
		
	}
	
	
	/*
	 * Create table in database. Used when creating a new user.
	 */
	protected static void createTable(String userName)
	{
		// reset variables
		con = null;
		insert = null;
				
		try {
			con = MySQLConnection.getConnection();
			insert = con.prepareStatement("CREATE TABLE " + userName + " LIKE events");
			insert.executeUpdate();
		} 
		catch(SQLIntegrityConstraintViolationException e)
		{
			System.out.println("SQL Constraint Violation error in MySQLDatabase class >> addEvent method. " + e);
		} 
		catch (SQLException e)
		{
			System.out.println("SQL error in MySQLDatabase class >> addEvent method. " + e);
		}
		catch(Exception e)
		{
			System.out.println("Undefined error in MySQLDatabase class >> addEvent method. " + e);
		}
		finally
		{
			try {
				insert.close();
			} catch (SQLException e) {
				System.out.println("SQL error in MySQLDatabase class >> createTable() method. Closing ResultSet and PreparedStatement. ");
				e.printStackTrace();
			}
		}
		
	}
	
	
	/*
	 * Create DefaultTableModel for table from Database data.
	 */
	private static DefaultTableModel setTableModel(ResultSet result)
	{
		@SuppressWarnings("serial")
		DefaultTableModel DefTable = new DefaultTableModel() {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};
		DefTable.addColumn("ID");
		DefTable.addColumn("Tapahtuma");
		DefTable.addColumn("Maksaja");
		DefTable.addColumn("Hinta");
		DefTable.addColumn("Päiväys");
		
		try {
			ResultSet rs = result;
			while (rs.next())
			{
				DefTable.addRow(new Object[] 
				{
				rs.getString("ID"),
				rs.getString("Tapahtuma"),
				rs.getString("Maksaja"),
				rs.getString("Hinta"),
				rs.getString("Päiväys")
				});
			}
			return DefTable;
		} catch (Exception e) 
		{
			System.out.println("Undefined error in MySQLDatabase class >> createTableModel() method. " + e);
		}
		return null;
	}
	

}	//	End of MySQLDatabase class.



